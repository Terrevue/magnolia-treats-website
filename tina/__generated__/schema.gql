# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  hero(relativePath: String): Hero!
  heroConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeroFilter): HeroConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  treats(relativePath: String): Treats!
  treatsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TreatsFilter): TreatsConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
  comics(relativePath: String): Comics!
  comicsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ComicsFilter): ComicsConnection!
}

input DocumentFilter {
  hero: HeroFilter
  about: AboutFilter
  treats: TreatsFilter
  contact: ContactFilter
  comics: ComicsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Hero | About | Treats | Contact | Comics | Folder

type Hero implements Node & Document {
  heading: String!
  subheading: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HeroFilter {
  heading: StringFilter
  subheading: StringFilter
}

type HeroConnectionEdges {
  cursor: String!
  node: Hero
}

type HeroConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeroConnectionEdges]
}

type About implements Node & Document {
  heading: String!
  text: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutFilter {
  heading: StringFilter
  text: StringFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type TreatsCookies {
  name: String!
  description: String
  image: String
}

type Treats implements Node & Document {
  cookies: [TreatsCookies]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input TreatsCookiesFilter {
  name: StringFilter
  description: StringFilter
  image: ImageFilter
}

input TreatsFilter {
  cookies: TreatsCookiesFilter
}

type TreatsConnectionEdges {
  cursor: String!
  node: Treats
}

type TreatsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TreatsConnectionEdges]
}

type Contact implements Node & Document {
  email: String!
  location: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactFilter {
  email: StringFilter
  location: StringFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type Comics implements Node & Document {
  title: String!
  date: String!
  image: String!
  alt: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ComicsFilter {
  title: StringFilter
  date: DatetimeFilter
  image: ImageFilter
  alt: StringFilter
}

type ComicsConnectionEdges {
  cursor: String!
  node: Comics
}

type ComicsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ComicsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHero(relativePath: String!, params: HeroMutation!): Hero!
  createHero(relativePath: String!, params: HeroMutation!): Hero!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateTreats(relativePath: String!, params: TreatsMutation!): Treats!
  createTreats(relativePath: String!, params: TreatsMutation!): Treats!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
  updateComics(relativePath: String!, params: ComicsMutation!): Comics!
  createComics(relativePath: String!, params: ComicsMutation!): Comics!
}

input DocumentUpdateMutation {
  hero: HeroMutation
  about: AboutMutation
  treats: TreatsMutation
  contact: ContactMutation
  comics: ComicsMutation
  relativePath: String
}

input DocumentMutation {
  hero: HeroMutation
  about: AboutMutation
  treats: TreatsMutation
  contact: ContactMutation
  comics: ComicsMutation
}

input HeroMutation {
  heading: String
  subheading: String
}

input AboutMutation {
  heading: String
  text: String
}

input TreatsCookiesMutation {
  name: String
  description: String
  image: String
}

input TreatsMutation {
  cookies: [TreatsCookiesMutation]
}

input ContactMutation {
  email: String
  location: String
}

input ComicsMutation {
  title: String
  date: String
  image: String
  alt: String
}

schema {
  query: Query
  mutation: Mutation
}
